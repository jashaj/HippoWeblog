<?xml version="1.0" ?>
<!--
  Copyright 2008 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN" "http://java.sun.com/j2ee/dtd/web-jsptaglibrary_1_2.dtd">
<taglib xmlns="http://java.sun.com/xml/ns/javaee" version="2.1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd">

    <tlib-version>1.0</tlib-version>
    <jsp-version>1.2</jsp-version>
    <short-name>hst-core-tags</short-name>
    <uri>http://www.hippoecm.org/jsp/hst/core</uri>
    <description>HST Core Tag Library</description>

    <tag>
        <name>include</name>
        <tag-class>org.hippoecm.hst.tag.HstIncludeTag</tag-class>
        <body-content>empty</body-content>
        <description> A HstComponent can include the content of its child HstComponent with this
            tag. </description>
        <attribute>
            <name>ref</name>
            <required>true</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>The name of the child HstComponent to be included.</description>
        </attribute>
        <example><![CDATA[
          <!-- Threecolumnlayout -->
          <table class="main">
            <tr>
              <td class="leftmenu">
                <hst:include ref="leftmenu"/>
              </td>
              <td class="content">
                <hst:include ref="content"/>
              </td>
              <td class="rightmenu">
                <hst:include ref="right"/>
              </td>
            </tr>
           </table>
         ]]></example>
    </tag>

    <tag>
        <name>param</name>
        <tag-class>org.hippoecm.hst.tag.ParamTag</tag-class>
        <body-content>empty</body-content>
        <description> This param tag can be nested into renderURL and actionURL to provide
            parameters. </description>
        <attribute>
            <name>name</name>
            <required>true</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>The name of the parameter</description>
        </attribute>
        <attribute>
            <name>value</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>The value of the parameter</description>
        </attribute>
        <example><![CDATA[
          <ul id="paging-nav">
            <c:forEach var="pageNr" items="${searchResults.pageNumbersArray}" varStatus="status">
              <c:set var="active" value="" />
              <c:if test="${searchResults.currentPage == pageNr}">
                <c:set var="active" value=" class=\"active\"" />
              </c:if>
              <hst:renderURL var="pagelink">
                <hst:param name="page" value="${pageNr}" />
                <hst:param name="query" value="${query}" />
              </hst:renderURL>
              <li${active}><a href="${pagelink}" title="${pageNr}">${pageNr}</a></li>
            </c:forEach>
          </ul>
          ]]></example>
    </tag>

    <tag>
        <name>renderURL</name>
        <tag-class>org.hippoecm.hst.tag.HstRenderURLTag</tag-class>
        <tei-class>org.hippoecm.hst.tag.HstRenderURLTag$TEI</tei-class>
        <body-content>JSP</body-content>
        <description> A HstComponent can make a render URL with this tag with adding some
            parameters. This renderURL will invoke the current page with different parameters for
            the HstComponent including this tag. </description>
        <attribute>
            <name>var</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description>The variable name of the renderURL</description>
        </attribute>
        <example><![CDATA[
          <ul id="paging-nav">
            <c:forEach var="pageNr" items="${searchResults.pageNumbersArray}" varStatus="status">
              <c:set var="active" value="" />
              <c:if test="${searchResults.currentPage == pageNr}">
                <c:set var="active" value=" class=\"active\"" />
              </c:if>
              <hst:renderURL var="pagelink">
                <hst:param name="page" value="${pageNr}" />
                <hst:param name="query" value="${query}" />
              </hst:renderURL>
              <li${active}><a href="${pagelink}" title="${pageNr}">${pageNr}</a></li>
            </c:forEach>
          </ul>
          ]]></example>
    </tag>

    <tag>
        <name>actionURL</name>
        <tag-class>org.hippoecm.hst.tag.HstActionURLTag</tag-class>
        <tei-class>org.hippoecm.hst.tag.HstActionURLTag$TEI</tei-class>
        <body-content>JSP</body-content>
        <description> A HstComponent can make a action URL with this tag. This tag is often used for
            building a form action URL. This actionURL will invoke the current page with submitting
            the parameters to the HstComponent including this tag. </description>
        <attribute>
            <name>var</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description>The variable name of the actionURL</description>
        </attribute>
    </tag>

    <tag>
        <name>resourceURL</name>
        <tag-class>org.hippoecm.hst.tag.HstResourceURLTag</tag-class>
        <tei-class>org.hippoecm.hst.tag.HstResourceURLTag$TEI</tei-class>
        <body-content>JSP</body-content>
        <description> A HstComponent can make a resource URL with this tag with resource ID. This
            resourceURL will invoke the current page with the resourceID for the HstComponent
            including this tag. </description>
        <attribute>
            <name>var</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description>The variable name of the resourceURL</description>
        </attribute>
        <attribute>
            <name>resourceId</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description> The resourceID to be used by the HstComponent. </description>
        </attribute>
    </tag>

    <tag>
        <name>link</name>
        <tag-class>org.hippoecm.hst.tag.HstLinkTag</tag-class>
        <tei-class>org.hippoecm.hst.tag.HstLinkTag$TEI</tei-class>
        <body-content>JSP</body-content>
        <description> This tag creates links. It knows whether to include or exclude the contextpath
            and servletpath. The attributes 'link' and 'node' get the current servletpath in their
            result, the 'path' attribute doen *not* get the servletpath. The reasoning is that the
            'path' attribute is used for static links, like for css and images. You should use one
            of the three attributes (link|path|node) within one tag, and not more then one. </description>
        <attribute>
            <name>var</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description>The variable name of the link tag</description>
        </attribute>
        <attribute>
            <name>link</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>org.hippoecm.hst.core.linking.HstLink</type>
            <description>A HstLink object, containing a already rewritten object</description>
        </attribute>
        <attribute>
            <name>linkByBeanPath</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
              A bean path of HstLink object which can be retrieved via pageContext.
              NOTE: This is mainly for allowing script templates (such as Freemarker) to set object property by bean name.
                    JSP developers could ignore this attribute and use 'link' attribute instead directly with object property value.
            </description>
        </attribute>
        <attribute>
            <name>path</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>A string path, typically a location relative to the webapp</description>
        </attribute>
        <attribute>
            <name>hippobean</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>org.hippoecm.hst.content.beans.standard.HippoBean</type>
            <description>A HippoBean object. This is typically one of your bean mapped
            objects</description>
        </attribute>
        <attribute>
            <name>hippobeanByBeanPath</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
              A bean path of HippoBean object which can be retrieved via pageContext.
              NOTE: This is mainly for allowing script templates (such as Freemarker) to set object property by bean path.
                    JSP developers could ignore this attribute and use 'hippobean' attribute instead directly with object property value.
            </description>
        </attribute>
        <attribute>
            <name>external</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.Boolean</type>
            <description>If value is 'true' the created link will be external, thus containing
                'http://' or 'https://' etc</description>
        </attribute>
        <attribute>
            <name>canonical</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.Boolean</type>
            <description>If the link that is created should be the canonical link, use this attr with value true</description>
        </attribute>
        <example><![CDATA[
        <!-- In a body component: A list of document names with summaries and links to those documents: -->

         <c:forEach var="child_document" items="${document_list}">
           <tr>
             <hst:link var="link" hippobean="${child_document}"/>
             <td class="title">
               <a href="${link}">${child_document.name}</a>
             </td>
             <td>${child_document.summary}</td>
           </tr>
         </c:forEach>

        <!-- In a <head>: -->

        <hst:link var='screencss' path='/css/community/screen.css'></hst:link>
        <link media='screen' href='${screencss}' type='text/css' rel='stylesheet'></link>

        <!-- In a menu: -->

         <ul id="nav-main">
           <c:forEach var="item" items="${menu.menuItems}">
             <c:choose >
               <c:when test="${! empty item.externalLink}">
                 <li>
                  <a href="${item.externalLink}"><b>${item.name}</b></a>
                 </li>
               </c:when>
               <c:when test="${item.expanded}">
                 <li class="active">
                   ${item.name}
                 </li>
               </c:when>
               <c:otherwise>
                 <li>
                   <hst:link var="link" link="${item.hstLink}" />
                   <a href="${link}">
                       ${item.name}
                   </a>
                </li>
               </c:otherwise>
             </c:choose>
           </c:forEach>
         </ul>
         ]]></example>

    </tag>

    <tag>
        <name>sitemapitem</name>
        <tag-class>org.hippoecm.hst.tag.SiteMapItemTag</tag-class>
        <body-content>JSP</body-content>
        <description>This sitemapitem tag can nested into a hst link tag to provide a preferred sitemap item to create the link for. You can define the 
        preferred sitemap item by choosing one (no more) of these attributes: preferItem, preferItemId, preferItemPath or preferItemByPath. Optionally 
        add a fallback attr which is a boolean true or false</description>
        <attribute>
            <name>preferItem</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>org.hippoecm.hst.configuration.sitemap.HstSiteMapItem</type>
            <description>A HstSiteMapItem object. The preferred sitemap item to use for linkrewriting</description>
        </attribute>
        <attribute>
            <name>preferItemId</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
              The id of the preferred sitemap item to use for linkrewriting
            </description>
        </attribute>
        <attribute>
            <name>preferPath</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
              The path of the preferred sitemap item to use for linkrewriting. If the path starts with a /, the / is removed and ignored.
            </description>
        </attribute>
        <attribute>
            <name>preferItemByPath</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
              A bean path of HstSiteMapItem object which can be retrieved via pageContext.
              NOTE: This is mainly for allowing script templates (such as Freemarker) to set object property by bean path.
                    JSP developers could ignore this attribute and use 'hippobean' attribute instead directly with object property value.
            </description>
        </attribute>
        <attribute>
            <name>fallback</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>boolean</type>
            <description>
              whether to fallback to normal linkrewriting when this preferred sitemap item is not suited to be used for the link
            </description>
        </attribute>
    </tag>


    <tag>
        <name>facetnavigationlink</name>
        <tag-class>org.hippoecm.hst.tag.HstFacetNavigationLinkTag</tag-class>
        <tei-class>org.hippoecm.hst.tag.HstFacetNavigationLinkTag$TEI</tei-class>
        <body-content>JSP</body-content>
        <description>This tag can be used in faceted navigation as a helper. You can use the 'remove' attribute to 
        remove a chosen facet-value combination from the current link. It returns a link according the 'link' tag
        described above</description>
        <attribute>
            <name>var</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description>The variable name of the facetnavigationlink tag</description>
        </attribute>
        <attribute>
            <name>current</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>org.hippoecm.hst.content.beans.standard.facetnavigation.HippoFacetSubNavigation</type>
            <description>A HippoFacetSubNavigation object. This is the current state of the faceted navigation, from 
            which you for example want to remove one facet-value combi.</description>
        </attribute>
        <attribute>
            <name>currentByBeanPath</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
              A bean path of a HippoFacetSubNavigation object which can be retrieved via pageContext.
              NOTE: This is mainly for allowing script templates (such as Freemarker) to set object property by bean path.
                    JSP developers could ignore this attribute and use 'hippobean' attribute instead directly with object property value.
            </description>
        </attribute>
        <attribute>
            <name>remove</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>org.hippoecm.hst.content.beans.standard.facetnavigation.HippoFacetSubNavigation</type>
            <description>A HippoFacetSubNavigation object.</description>
        </attribute>
        <attribute>
            <name>removeByBeanPath</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
              A bean path of a HippoFacetSubNavigation object which can be retrieved via pageContext.
              NOTE: This is mainly for allowing script templates (such as Freemarker) to set object property by bean path.
                    JSP developers could ignore this attribute and use 'hippobean' attribute instead directly with object property value.
            </description>
        </attribute>
        <attribute>
            <name>removeList</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.util.List</type>
            <description>The List of HippoFacetSubNavigation's to be removed.</description>
        </attribute>
        <attribute>
            <name>removeListByBeanPath</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
              A bean path of a HippoFacetSubNavigation object which can be retrieved via pageContext.
              NOTE: This is mainly for allowing script templates (such as Freemarker) to set object property by bean path.
                    JSP developers could ignore this attribute and use 'hippobean' attribute instead directly with object property value.
            </description>
        </attribute>
    </tag>

    <tag>
        <name>surfandeditlink</name>
        <tag-class>org.hippoecm.hst.tag.HstSurfAndEditTag</tag-class>
        <tei-class>org.hippoecm.hst.tag.HstSurfAndEditTag$TEI</tei-class>
        <body-content>JSP</body-content>
        <description>This tag can be used to create a surfandedit cms url. Only in preview mode, the 
        tag will output something. In live, it will be ignored.</description>
        <attribute>
            <name>var</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description>The variable name of the surf and edit link</description>
        </attribute>
        <attribute>
            <name>hippobean</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>org.hippoecm.hst.content.beans.standard.HippoBean</type>
            <description>A HippoBean object. This is typically one of your bean mapped
            objects</description>
        </attribute>
        <attribute>
            <name>hippobeanByBeanPath</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
              A bean path of HippoBean object which can be retrieved via pageContext.
              NOTE: This is mainly for allowing script templates (such as Freemarker) to set object property by bean name.
                    JSP developers could ignore this attribute and use 'hippobean' attribute instead directly with object property value.
            </description>
        </attribute>
    </tag>

    <tag>
        <name>html</name>
        <tag-class>org.hippoecm.hst.tag.HstHtmlTag</tag-class>
        <tei-class>org.hippoecm.hst.tag.HstHtmlTag$TEI</tei-class>
        <body-content>JSP</body-content>
        <description/>
        <attribute>
            <name>var</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description>The variable name of the html tag</description>
        </attribute>
        <attribute>
            <name>hippohtml</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>org.hippoecm.hst.content.beans.standard.HippoHtml</type>
            <description>A HippoHtml object. This is typically one of your bean mapped
            objects</description>
        </attribute>
        <attribute>
            <name>hippohtmlByBeanPath</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
              A bean name of HippoHtml object which can be retrieved from pageContext.
              NOTE: This is mainly for allowing script templates (such as Freemarker) to set object property by bean name.
                    JSP developers could ignore this attribute and use 'hippohtml' attribute instead directly with object property value.
            </description>
        </attribute>
        <attribute>
            <name>contentRewriter</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>org.hippoecm.hst.content.rewriter.ContentRewriter</type>
            <description>A ContentRewriter object.</description>
        </attribute>
        <attribute>
            <name>contentRewriterByBeanPath</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
              A bean name of ContentRewriter object which can be retrieved from pageContext.
              NOTE: This is mainly for allowing script templates (such as Freemarker) to set object property by bean name.
                    JSP developers could ignore this attribute and use 'contentRewriter' attribute instead directly with object property value.
            </description>
        </attribute>
        <example><![CDATA[
          <div>
             <hst:html hippohtml="${document.intro}"/>
          </div>
          ]]></example>
    </tag>

    <tag>
        <name>attribute</name>
        <tag-class>org.hippoecm.hst.tag.HstAttributeTag</tag-class>
        <body-content>JSP</body-content>
        <description> This tag can be used only inside a element tag to set an attribute for the DOM
            element created by the containing element tag. The attribute value can be set by the
            value attribute, but it can be set by the text content of this tag also. If the value
            attribute of this tag is not set, this tag will look for the body text content to set
            the value of this attribute. If the value attribute is not set at all, then it will
            remove the attribute by the name. </description>
        <attribute>
            <name>name</name>
            <required>true</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>The attribute name for the element</description>
        </attribute>
        <attribute>
            <name>value</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>The attribute value for the element</description>
        </attribute>
    </tag>

    <tag>
        <name>element</name>
        <tag-class>org.hippoecm.hst.tag.HstElementTag</tag-class>
        <tei-class>org.hippoecm.hst.tag.HstElementTag$TEI</tei-class>
        <body-content>JSP</body-content>
        <description> This tag can be used to create DOM Element to create head contribution
            element. If you create a DOM Element via this tag and pass the variable to a
            head-contribution tag, then the head-contribution element does not need to parse the
            text content to create the head contribution DOM element. So, this tag provides an
            optimized way to create a head-contribution element. This tag can contain zero, one or
            more attribute tags to set attributes. Also, this tag can contain text content to set
            the text content of the DOM element. </description>
        <attribute>
            <name>var</name>
            <required>true</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>The variable name of the created DOM element</description>
        </attribute>
        <attribute>
            <name>name</name>
            <required>true</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>The tag name of the created DOM element</description>
        </attribute>
    </tag>

    <tag>
        <name>head-contribution</name>
        <tag-class>org.hippoecm.hst.tag.HeadContributionTag</tag-class>
        <body-content>JSP</body-content>
        <description>Deprecated: use headContribution instead.
        </description>
        <attribute>
            <name>keyHint</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description>Tag is Deprecated: use headContribution instead.
            </description>
        </attribute>
        <attribute>
            <name>element</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>org.w3c.dom.Element</type>
            <description>Tag is Deprecated: use headContribution instead.
            </description>
        </attribute>
        <attribute>
            <name>elementByBeanPath</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>Tag is Deprecated: use headContribution instead.
            </description>
        </attribute>
        <attribute>
            <name>category</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description>Tag is Deprecated: use headContribution instead.
            </description>
        </attribute>
    </tag>

    <tag>
        <name>headContribution</name>
        <tag-class>org.hippoecm.hst.tag.HeadContributionTag</tag-class>
        <body-content>JSP</body-content>
        <description> A HstComponent can contribute HTML HEAD elements to the page aggregation.
            Because the output of a HstComponent is usually put in the middle of BODY area, it is
            not recommended to include some javascripts or style definitions in its view page. If
            the view page uses this head-contribution tag including some head element, then the
            container will include the head element at the final page aggregation phase. </description>
        <attribute>
            <name>keyHint</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description> To avoid multiple inclusion of the same HEAD element like javascript
                library, this keyHint attribute can be provided to set the key for the HEAD element.
                If two HstComponents contribute HEAD elements with same keyHint attribute, the
                container will include the HEAD element only once. If the component does not provide
                keyHint attribute, the container will make a keyHint automatically by stringifying
                the included HEAD element by this tag. </description>
        </attribute>
        <attribute>
            <name>element</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>org.w3c.dom.Element</type>
            <description> For more optimized way to create and use DOM element, this tag supports
                setting a DOM element by element attribute. If this attribute is set, then the
                head-contribution tag will not try to parse the body content to create a DOM
                element. Instead, it will use the passed DOM element by this attribute.
            </description>
        </attribute>
        <attribute>
            <name>elementByBeanPath</name>
            <required>false</required>
            <rtexprvalue>true</rtexprvalue>
            <type>java.lang.String</type>
            <description>
              A bean name of Element object which can be retrieved from pageContext.
              NOTE: This is mainly for allowing script templates (such as Freemarker) to set object property by bean name.
                    JSP developers could ignore this attribute and use 'element' attribute instead directly with object property value.
            </description>
        </attribute>
        <attribute>
            <name>category</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description> Category name of the contributed head element.
              The head elements can be filtered in or filtered out by this attribute.
              By the way, this attribute does not affect anything in portal/portlet environment. </description>
        </attribute>
        <example><![CDATA[
          <hst:headContribution keyHint="generator">
            <meta name="generator" content="Hippo Site Toolkit 2"/>
          </hst:headContribution>
          ]]></example>
    </tag>

    <tag>
        <name>head-contributions</name>
        <tag-class>org.hippoecm.hst.tag.HeadContributionsTag</tag-class>
        <body-content>empty</body-content>
        <description>Deprecated: use headContributions instead.</description>
        <attribute>
            <name>xhtml</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>boolean</type>
            <description>Tag is Deprecated: use headContributions instead.
            </description>
        </attribute>
        <attribute>
            <name>categoryIncludes</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description>Tag is Deprecated: use headContributions instead.
            </description>
        </attribute>
        <attribute>
            <name>categoryExcludes</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description>Tag is Deprecated: use headContributions instead.
            </description>
        </attribute>
    </tag>

    <tag>
        <name>headContributions</name>
        <tag-class>org.hippoecm.hst.tag.HeadContributionsTag</tag-class>
        <body-content>empty</body-content>
        <description> All the HEAD elements contributed by each HstComponent can be accessed only by
            the root HstComponent. The root HstComponent will be responsible for rendering all the
            contributed HEAD elements. By inserting this tag, the root HstComponent can render all
            the contributed HEAD elements. </description>
        <attribute>
            <name>xhtml</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>boolean</type>
            <description> If this attribute is true, then the output will be generated as XHTML
                format. By default, this value is false. </description>
        </attribute>
        <attribute>
            <name>categoryIncludes</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description> Comma separated category list string for category includes.
              Contributed head elements can be filtered in by this attribute.
              If a contributed head element has a category and this attribute contains
              the category, then the head element would be written into the page.
              By the way, this attribute does not affect anything in portal/portlet environment. </description>
        </attribute>
        <attribute>
            <name>categoryExcludes</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description> Comma separated category list string for category excludes.
              Contributed head elements can be filtered out by this attribute.
              If a contributed head element has a category and this attribute does not contain
              the category, then the head element would be written into the page.
               By the way, this attribute does not affect anything in portal/portlet environment. </description>
        </attribute>
    </tag>

    <tag>
        <name>write-head-contributions</name>
        <tag-class>org.hippoecm.hst.tag.HeadContributionsTag</tag-class>
        <body-content>empty</body-content>
        <description>Deprecated: use writeHeadContributions instead.
        </description>
        <attribute>
            <name>xhtml</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>boolean</type>
            <description>Tag is deprecated: use writeHeadContributions instead.</description>
        </attribute>
        <attribute>
            <name>categoryIncludes</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description>Tag is deprecated: use writeHeadContributions instead.</description>
        </attribute>
        <attribute>
            <name>categoryExcludes</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description>Tag is deprecated: use writeHeadContributions instead.</description>
        </attribute>
    </tag>

    <tag>
        <name>writeHeadContributions</name>
        <tag-class>org.hippoecm.hst.tag.HeadContributionsTag</tag-class>
        <body-content>empty</body-content>
        <description> All the HEAD elements contributed by each HstComponent can be accessed only by
            the root HstComponent. The root HstComponent will be responsible for rendering all the
            contributed HEAD elements. By inserting this tag, the root HstComponent can render all
            the contributed HEAD elements. </description>
        <attribute>
            <name>xhtml</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>boolean</type>
            <description> If this attribute is true, then the output will be generated as XHTML
                format. By default, this value is false. </description>
        </attribute>
        <attribute>
            <name>categoryIncludes</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description> Comma separated category list string for category includes.
              Contributed head elements can be filtered in by this attribute.
              If a contributed head element has a category and this attribute contains
              the category, then the head element would be written into the page.
              By the way, this attribute does not affect anything in portal/portlet environment. </description>
        </attribute>
        <attribute>
            <name>categoryExcludes</name>
            <required>false</required>
            <rtexprvalue>false</rtexprvalue>
            <type>java.lang.String</type>
            <description> Comma separated category list string for category excludes.
              Contributed head elements can be filtered out by this attribute.
              If a contributed head element has a category and this attribute does not contain
              the category, then the head element would be written into the page.
              By the way, this attribute does not affect anything in portal/portlet environment. </description>
        </attribute>
    </tag>

    <tag>
        <name>namespace</name>
        <tag-class>org.hippoecm.hst.tag.NamespaceTag</tag-class>
        <body-content>empty</body-content>
        <description> Because there could be multiple HstComponents in a page, it is necessary to
            separate its namespace from each other during writing some javascript functions or HTML
            elements. Using this tag, each HstComponent can write unique name for its elements.
        </description>
    </tag>

    <tag>
        <name>defineObjects</name>
        <tag-class>org.hippoecm.hst.tag.DefineObjectsTag</tag-class>
        <tei-class>org.hippoecm.hst.tag.DefineObjectsTag$TEI</tei-class>
        <body-content>empty</body-content>
    </tag>

</taglib>
